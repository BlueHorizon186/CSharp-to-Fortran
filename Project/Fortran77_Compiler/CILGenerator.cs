using System;
using System.Collections.Generic;
using System.Text;

namespace Fortran77_Compiler
{
    public class CILGenerator
    {
        public IDictionary<string, SymbolTable> GlobalTable { get; private set; }
        private int labelCounter;

        public CILGenerator(IDictionary<string, SymbolTable> table)
        {
            GlobalTable = table;
            labelCounter = 0;
        }

        //-----------------------------------------------------------
        private string GenerateLabel()
        {
            return String.Format("${0:000000}", labelCounter++);
        }

        //-----------------------------------------------------------
        static readonly IDictionary<Type, string> CILTypes =
            new Dictionary<Type, string>()
            {
                { Type.LOGICAL, "bool" },
                { Type.INTEGER, "int32" },
                { Type.REAL, "float32" },
                { Type.STRING, "string" }
            };

        //-----------------------------------------------------------
        public string Visit(Program node)
        {
            return "// Code generated by the Fortran 77 Compiler.\n\n"
                + ".assembly 'csf77' {}\n\n"
                + ".class public '" + node[0].AnchorToken.Lexeme + "'" 
                + " extends ['mscorlib']'System'.'Object' {\n"
                + "\t.method public static void 'start'() {\n"
                + "\t\t.entrypoint\n"
                + Visit((dynamic) node[1])
                + Visit((dynamic) node[2])
                + "\t\tret\n"
                + "\t}\n"
                + "}\n";
        }

        //-----------------------------------------------------------
        public string Visit(DeclarationList node)
        {
            return "";
        }

        //-----------------------------------------------------------
        public string Visit(Declaration node)
        {
            // This method is never called.
            return null;
        }

        //-----------------------------------------------------------
        public string Visit(StatementList node)
        {
            return VisitChildren(node);
        }

        //-----------------------------------------------------------
        public string Visit(Write node)
        {
            var toPrint = 0;
            if (node[0] is Label)
                toPrint++;

            var sb = new StringBuilder();
            for (int i = toPrint; i < node.NodeChildrenCount(); i++)
            {
                sb.Append(Visit((dynamic) node[i]));
                sb.Append("\t\tcall void ['mscorlib']'System'.'Console'::'WriteLine'");
                sb.Append("(" + CILTypes[Type.STRING] + ")\n");
            }
            return sb.ToString();
        }

        //-----------------------------------------------------------
        public string Visit(StringLiteral node)
        {
            return "\t\tldstr \"" + node.AnchorToken.Lexeme + "\"\n";
        }

        //-----------------------------------------------------------
        private string VisitChildren(Node node)
        {
            var sb = new StringBuilder();
            foreach (var n in node) {
                sb.Append(Visit((dynamic) n));
            }
            return sb.ToString();
        }

        //-----------------------------------------------------------
        private string VisitBinaryOperator(string op, Node node)
        {
            return Visit((dynamic) node[0])
                + Visit((dynamic) node[1])
                + "\t\t"
                + op 
                + "\n";            
        }
    }
}
