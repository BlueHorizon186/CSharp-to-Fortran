using System;
using System.Collections.Generic;
using System.Text;

namespace Fortran77_Compiler
{
    public class CILGenerator
    {
        public IDictionary<string, SymbolTable> GlobalTable { get; private set; }
        private int labelCounter;
        private string currentProgUnit;

        public CILGenerator(IDictionary<string, SymbolTable> table)
        {
            GlobalTable = table;
            labelCounter = 0;
            currentProgUnit = "";
        }

        //-----------------------------------------------------------
        private string GenerateLabel()
        {
            return String.Format("${0:000000}", labelCounter++);
        }

        //-----------------------------------------------------------
        static readonly IDictionary<Type, string> CILTypes =
            new Dictionary<Type, string>()
            {
                { Type.LOGICAL, "bool" },
                { Type.INTEGER, "int32" },
                { Type.REAL, "float32" },
                { Type.STRING, "string" }
            };

        /* **********************************************************
         *                   Program and Declarations
         * *********************************************************/

        //-----------------------------------------------------------
        public string Visit(Program node)
        {
            currentProgUnit = node[0].AnchorToken.Lexeme;
            return "// Code generated by the Fortran 77 Compiler.\n\n"
                + ".assembly 'csf77' {}\n\n"
                + ".assembly extern 'F77Lib' {}\n\n"
                + ".class public '" + node[0].AnchorToken.Lexeme + "'" 
                + " extends ['mscorlib']'System'.'Object' {\n"
                + "\t.method public static void 'start'() {\n"
                + "\t\t.entrypoint\n"
                + Visit((dynamic) node[1])
                + Visit((dynamic) node[2])
                + "\t\tret\n"
                + "\t}\n"
                + "}\n";
        }

        //-----------------------------------------------------------
        public string Visit(DeclarationList node)
        {
            var currentTable = GlobalTable[currentProgUnit];
            var sb = new StringBuilder();

            foreach (var entry in currentTable)
            {
                var symbolEntry = entry.Value;
                sb.Append(String.Format(
                    "\t\t.locals init ({0} '{1}')\n",
                    CILTypes[symbolEntry.SymbolType],
                    entry.Key));
            }
            return sb.ToString();
        }

        //-----------------------------------------------------------
        public string Visit(Declaration node)
        {
            // This method is never called.
            return null;
        }

        /* **********************************************************
         *                        Statements
         * *********************************************************/

        //-----------------------------------------------------------
        public string Visit(StatementList node)
        {
            return VisitChildren(node);
        }

        //-----------------------------------------------------------
        public string Visit(Assignment node)
        {
            return Visit((dynamic) node[1]) 
                + "\t\tstloc '" 
                + node[0].AnchorToken.Lexeme 
                + "'\n";
        }

        //-----------------------------------------------------------
        public string Visit(Identifier node)
        {
            return "\t\tldloc '"
                + node.AnchorToken.Lexeme 
                + "'\n";
        }

        //-----------------------------------------------------------
        public string Visit(Write node)
        {
            var toPrint = 0;
            var sb = new StringBuilder();

            if (node[0] is Label)
            {
                sb.Append("\t" + GenerateLabel() + ":");
                toPrint++;
            }
                
            for (int i = toPrint; i < node.NodeChildrenCount(); i++)
            {
                sb.Append(Visit((dynamic) node[i]));
                sb.Append("\t\tcall void class ['F77Lib']'Fortran77_Compiler'.");
                sb.Append("'Utils'::'Print'(");
                sb.Append(CILTypes[node.ExpressionTypes[i]]);
                sb.Append(")\n");
            }
            return sb.ToString();
        }

        /* **********************************************************
         *                       Expressions
         * *********************************************************/

        //-----------------------------------------------------------
        public string Visit(And node)
        {
            return VisitBinaryOperator("and", node);
        }

        //-----------------------------------------------------------
        public string Visit(Or node)
        {
            return VisitBinaryOperator("or", node);
        }

        //-----------------------------------------------------------
        public string Visit(Not node)
        {
            return Visit((dynamic) node[0])
                + "\t\tldc.i4.1\n"
                + "\t\txor\n";
        }

        //-----------------------------------------------------------
        public string Visit(Negation node)
        {
            return "\t\tldc.i4.0\n"
                + Visit((dynamic) node[0])
                + "\t\tsub\n";
        }

        //-----------------------------------------------------------
        public string Visit(Addition node)
        {
            return VisitBinaryOperator("add", node);
        }

        //-----------------------------------------------------------
        public string Visit(Substraction node)
        {
            return VisitBinaryOperator("sub", node);
        }

        //-----------------------------------------------------------
        public string Visit(Multiplication node)
        {
            return VisitBinaryOperator("mul", node);    
        }

        //-----------------------------------------------------------
        public string Visit(Division node)
        {
            return VisitBinaryOperator("div", node);    
        }

        /* **********************************************************
         *                        Literals
         * *********************************************************/

        //-----------------------------------------------------------
        public string Visit(StringLiteral node)
        {
            return "\t\tldstr \"" + node.AnchorToken.Lexeme + "\"\n";
        }

        //-----------------------------------------------------------
        public string Visit(IntLiteral node)
        {
            var intValue = Convert.ToInt32(node.AnchorToken.Lexeme);
            if (intValue <= 8)
            {
                return "\t\tldc.i4." + intValue + "\n";
            }
            else if (intValue <= 127)
            {
                return "\t\tldc.i4.s " + intValue + "\n";
            }
            else
            {
                return "\t\tldc.i4 " + intValue + "\n";
            }
        }

        //-----------------------------------------------------------
        public string Visit(RealLiteral node)
        {
            var realValue = Convert.ToDouble(node.AnchorToken.Lexeme);
            return "\t\tldc.r4 " + realValue + "\n";
        }

        //-----------------------------------------------------------
        public string Visit(LogicLiteral node)
        {
            if (node.AnchorToken.Lexeme == ".true.")
                return "\t\tldc.i4.1\n";
            else
                return "\t\tldc.i4.0\n";
        }

        /* **********************************************************
         *                     Auxiliary Methods
         * *********************************************************/

        //-----------------------------------------------------------
        private string VisitChildren(Node node)
        {
            var sb = new StringBuilder();
            foreach (var n in node) {
                sb.Append(Visit((dynamic) n));
            }
            return sb.ToString();
        }

        //-----------------------------------------------------------
        private string VisitBinaryOperator(string op, Node node)
        {
            return Visit((dynamic) node[0])
                + Visit((dynamic) node[1])
                + "\t\t"
                + op 
                + "\n";            
        }
    }
}
